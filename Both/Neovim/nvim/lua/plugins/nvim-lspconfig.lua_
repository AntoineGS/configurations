return {
  "neovim/nvim-lspconfig",
  dependencies = { "saghen/blink.cmp" },
  opts = {
    servers = {
      lua_ls = {
        settings = {
          Lua = {
            diagnostics = {
              globals = { "vim" },
            },
            workspace = {
              library = {
                vim.fn.expand "$VIMRUNTIME/lua",
                vim.fn.expand "$VIMRUNTIME/lua/vim/lsp",
                vim.fn.stdpath "data" .. "/lazy/ui/nvchad_types",
                vim.fn.stdpath "data" .. "/lazy/lazy.nvim/lua/lazy",
                "${3rd}/luv/library",
                "./deps",
              },
              maxPreload = 100000,
              preloadFileSize = 10000,
            },
            runtime = {
              version = "LuaJIT",
            },
          },
        },
      },
      html = {},
      cssls = {},
      powershell_es = {},
      pyright = {},
      docker_compose_language_service = {},
      bashls = {},
      spectral = {},
      marksman = {},
      clangd = {},
    },
  },
  config = function(_, opts)
    for server, config in pairs(opts.servers) do
      -- passing config.capabilities to blink.cmp merges with the capabilities in your
      -- `opts[server].capabilities, if you've defined it
      config.capabilities = require("blink.cmp").get_lsp_capabilities()
      vim.lsp.config(server, config)
      vim.lsp.enable(server)
    end
  end,
  -- config = function(_, opts)
  --   local lspconfig = require "lspconfig"
  --   for server, config in pairs(opts.servers) do
  --     -- passing config.capabilities to blink.cmp merges with the capabilities in your
  --     -- `opts[server].capabilities, if you've defined it
  --     -- config.capabilities = require("blink.cmp").get_lsp_capabilities(config.capabilities)
  --     config.capabilities = require("blink.cmp").get_lsp_capabilities()
  --     lspconfig[server].setup(config)
  --   end
  -- end,
}
